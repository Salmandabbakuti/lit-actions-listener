import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import litAuth from "@lit-protocol/auth-browser";
import styles from '../styles/Home.module.css';

export default function Home() {
  const [actionInputData, setActionInputData] = useState({});
  const [loading, setLoading] = useState(false);
  const [logMessage, setLogMessage] = useState("");

  const handleActionInputDataChange = (e) => setActionInputData({ ...actionInputData, [e.target.name]: e.target.value });

  const handleRegisterAction = async () => {
    // prompt signing
    if (!["name", "jsParams", "code", "eventType", "when"].every((key) => actionInputData[key])) return alert("Please fill in all fields!");
    try {
      setLogMessage("");
      setLoading(true);
      const { jsParams, eventType, when } = actionInputData;
      const jsParamsObj = JSON.parse(jsParams);
      const whenObj = JSON.parse(when);

      const authSignature = await litAuth.checkAndSignAuthMessage({ chain: "mumbai" });
      // if (!authSignature) {
      //   authSignature = await LitJsSdk.checkAndSignAuthMessage({ chain: "mumbai" });
      //   console.log("authSignature", authSignature);
      //   return;
      // }
      const response = await fetch('/api/graphql', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: `
          mutation createAction($data: createActionInput!) {
            createAction(data: $data) 
          }
          `,
          variables: {
            data: {
              ...actionInputData,
              authSignature,
              jsParams: jsParamsObj,
              when: whenObj,
              createdBy: authSignature?.address
            }
          },
        }),
      });
      const { data } = await response.json();
      console.log(data);
      setLoading(false);
      setLogMessage("Action registered successfully!");
    } catch (err) {
      setLoading(false);
      console.log("error registering action", err);
      setLogMessage(`Error registering action: ${err.message}`);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Lit Actions</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://litprotocol.com/">Lit Actions!</a>
        </h1>
        {/* lit actions container */}
        <div className={styles.createActionContainer}>
          <h3>Create Action</h3>
          <input
            className={styles.input}
            name="name"
            type="text"
            placeholder='Name your action. e.g. "Lit Webhook action"'
            onChange={handleActionInputDataChange}
          />
          <textarea
            className={styles.input}
            name="code"
            type="text"
            onChange={handleActionInputDataChange}
            placeholder='Paste javascript code to run on lit nodes..'
            rows={20}
            cols={20}
            wrap="hard"
          />
          <textarea
            className={styles.input}
            name="jsParams"
            type="text"
            onChange={handleActionInputDataChange}
            rows={5}
            cols={5}
            wrap="hard"
            placeholder='Paste json object of params to pass to your javascript code.. e.g. {"sigName": "mysig1"}. if none, leave it as {}'
          />
          <label htmlFor="eventType">Choose Event Type:</label>
          <select
            name="eventType"
            className={styles.input}
            label="Event Type"
            id="eventType"
            onChange={handleActionInputDataChange}
          >
            <option value="">None</option>
            <option value="BLOCK">BLOCK</option>
            <option value="CONTRACT">CONTRACT</option>
            <option value="WEBHOOK">WEBHOOK</option>
          </select>
          <textarea
            className={styles.input}
            name="when"
            type="text"
            placeholder='Paste json object of when to run your action.. e.g. {"blockNumber": 120458971} or {"contractEventName": "Transfer"}. if none, leave it as {}'
            onChange={handleActionInputDataChange}
            rows={5}
            cols={5}
          />
          <button className={styles.button} onClick={handleRegisterAction} disabled={loading}>Register Action</button>
        </div>
        {loading && <p>Loading...</p>}
        <p>{logMessage}</p>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://github.com/Salmandabbakuti"
          target="_blank"
          rel="noopener noreferrer"
        >
          Â© 2022 Salman Dabbakuti. Built For Lit Protocol
        </a>
      </footer>
    </div>
  );
};;
